@import "../functions/str"
@import "./utils/palettes.scss"

// -------------------------------
//  Config Variables
// -------------------------------

// Theme
$primary: 'red' !default
$accent: 'light-blue' !default

// Containers
$background: "grey" !default
$foreground: "foreground-dark" !default

// Notifications
$info: 'blue' !default
$success: 'green' !default
$warning: 'yellow' !default
$danger: 'red' !default

// Setup Color Scheme Map
$default-hue: '500' !default
$color-scheme: ('primary': $primary, 'accent': $accent, 'info': $info, 'success': $success, 'warning': $warning, 'danger': $danger) !default


// ---------------------------
// Color Mixin
// ---------------------------

// Color
// @summary sets a combination of background, text, and border color
//
// @param {color} [<color>, <color + hue>]
// @param {contrast-type} ['is-inverted', 'is-outlined']
//
// @examples
//   color('accent')
//   color('primary 400', 'is-outlined')
//   
@mixin color($args...)
  // data to get color from color scheme
  $color: 'primary' !default
  $hue: $default-hue !default
  // data to set color contrast
  $is-outlined: false !default
  $is-inverted: false !default
  // output colors
  $color-main: null !default
  $color-contrast: null !default

  // override passed params
  @each $arg in $args
    @if str-index($arg, 'outlined') != null
      $is-outlined: true
    @else if str-index($arg, 'inverted') != null
      $is-inverted: true
    @else
      @if str-index($arg, ' ') != null
        $list: str-split($arg, ' ')
        $color: nth($list, 1)
        $hue: nth($list, 2)
      @else
        $color: $arg

  // fetch colors via color scheme map
  // or directly from palettes
  $nested-color: null
  @if map-has-key($color-scheme, $color)
    $nested-color: map-get($color-scheme, $color)
    $color-main: get-color($nested-color, $hue)
    $color-contrast: get-color($nested-color, 'contrast')
  @else
    $color-main: get-color($color, $hue)
    $color-contrast: get-color($color, 'contrast')

  // set colors
  @if $is-inverted
    background-color: $color-contrast
    color: $color-main
    @if $is-outlined
      border: 1px solid $color-main
  @else
    background-color: $color-main
    color: $color-contrast
    @if $is-outlined
      border: 1px solid $color-contrast

//--------------------------
//  Helper Functions
//--------------------------

// Get Color
// @summary given a color and hue, gets color from color scheme map
@function get-color($color, $hue: $default-hue)
  $curr_color: map-get($colors, $color)

  // return either the nested hue or the current color
  @if map-has-key($curr_color, $hue)
    @return map-get($curr_color, $hue)
  @else
    @return map-get($color, $hue)
