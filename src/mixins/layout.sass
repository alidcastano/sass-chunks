// {Layout} is composed of five main parts:
//  @mixin flex-contain
//  @mixin flex-span
//  @mixin place-children
//  @mixin place-self
//  @mixin place-content

// -------------------------------
// Config Variables
// -------------------------------

$grid-space: 12 !default

// -------------------------------
// Layout Mixins
// -------------------------------

// Parent Contain
// @summary specifies how container should contain its children
//
// @param {direction} [column, row]
// @param {wrapping} [wrap, nowrap] 
//
// @example
//  flex-contain(column, nowrap)
//
@mixin parent-contain($d: row, $w: wrap)
  display: flex
  flex-direction: $d
  flex-wrap: $w

  position: relative
  // Prevent collapsing
  min-height: 1px
  // Prevent columns from becoming too narrow when at smaller grid tiers
  width: 100%


// Child Span
// @summary specieis how a cell should span its container
//
// @param {cell-basis} [1-12, auto] initial grid space that cell should take up
// @param {flex-factor} [fixed, fluid, grow, shrink] how to fill remaining space
//
// @examples
//  flex-span(4, fluid)
//  flex(4)
//  flex(fluid)
//
// @note:
//  if flex container $direction is 'column' then cell space determines height
//  if flex container $direction is 'row' then cell space determines width
//
@mixin child-span($args...)
  $cell-basis: auto !default
  $flex-factor: 'fixed' !default

  // override value if param was passed
  @each $arg in $args
    @if type_of($arg) == number
      $cell-basis: $arg
    @else if type_of($arg) == string and $arg != 'auto'
      $flex-factor: $arg

  // if space is auto then flex-box will determine the initial space based
  // on the weight or height, otherwise it's the percentage of space taken up
  @if $cell-basis != auto
    $cell-basis: percentage($cell-basis / $grid-space)

  // remains unchanged regardless of remaining space
  @if $flex-factor == 'fixed'
    $flex-factor: 0 0
  // grow and shrink with remaning space
  @else if $flex-factor == 'fluid'
    $flex-factor: 1 1
  // only enlarge to fill remaning space
  @else if $flex-factor == 'grow'
    $flex-factor: 0 1
  // only prevent overflow
  @else if $flex-factor == 'shrink'
    $flex-factor: 1 0
  @else
    @error "'#{$flex}' is not a valid argument"

  flex: $flex-factor $cell-basis


// Position Children
// @summary specifies how child elements should be positioned
//
// @param {x-position} [left, center, right]
// @param {y-position} [top, middle, bottom]
//
// @example
//   position-children(left, middle)
//
@mixin position-children($x-pos: null, $y-pos: null)
  justify-content: get-flex-pos($x-pos)
  align-items: get-flex-pos($y-pos)
  // TODO add align content


// Position Self
// @summary positions block or inline-block like elements like containers
//
// @param {x-position} [left, center, right]
// @param {y-position} [top, middle, bottom]
//
// @example
//   position-self(left, bottom)
//
@mixin position-self($x-pos: null, $y-pos: null)
  +justify-self($x-pos)
  +align-self($y-pos)

// Position Content
// @summary positions inline content like text
//
// @param {x-position} [left, center, right]
// @param {y-position} [top, middle, bottom]
// @param {line-type} [single, multiple]
// @param {text-spacing} [number]
//
@mixin place-content($x-pos, $y-pos, $args...)
  $type: 'single' !default
  $height: auto !default
  // override passed params
  @each $arg in $args
    @if type_of($arg) == string
      $type: $arg
    @else if type_of($arg) == number
      $height: $arg

  text-align: $x-pos
  // we need to set line height to container height
  // for vertical align to position element in terms of entire container
  line-height: $height

  @if $type == 'single'
    vertical-align: $y-pos
  // if content is multiple lines of text then it should be
  // nested under a 'span' or 'p' tag for vertical align to work
  @else if $type == 'multiple'
    & > span,
    & > p
      display: inline-block
      line-height: 20px
      vertical-align: $y-pos


//--------------------------
//  Helper Mixins
//--------------------------

// Justify Self
// @summary positions element horizontally
//
// @param  {x-position} [left / center / right]
//
@mixin justify-self($x-pos)
  @if $x-pos == left
    margin-right: auto
  @else if $x-pos == center
    margin-left: auto
    margin-right: auto
  @else if $x-pos == right
    margin-left: auto

// Align Self
// @summary positions element vertically
//          replicates justify-content property but for individual cells
//
// @param {y-position} [top / middle / bottom]
//   >> also accepts flexbox values: [start / center / end TODO baseline, strech]
//
@mixin align-self($y-pos)
  @if $y-pos == top
    $y-pos: start
  @else if $y-pos == middle or $y-pos == center
    $y-pos: center
  @else if $y-pos == bottom
    $y-pos: end

  align-self: get-flex-pos($y-pos)

//--------------------------
//  Helper Functions
//--------------------------

// Get Flex Position
// @summary appends flex prefix to position value
//
// @param {position} [start, center, end TODO space-around, space-between]
//
@function get-flex-pos($pos)
  @if $pos == null
    @return $pos

  $prefix: flex-
  @if $pos == center
    $prefix: null

  @return #{$prefix}#{$pos}
